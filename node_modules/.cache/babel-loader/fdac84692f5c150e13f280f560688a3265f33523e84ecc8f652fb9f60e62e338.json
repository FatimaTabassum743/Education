{"ast":null,"code":"// Airtable Service for Form Data Storage\n// Airtable is like Excel but better for web apps\n\nclass AirtableService {\n  constructor() {\n    // Replace with your Airtable configuration\n    this.baseId = 'YOUR_AIRTABLE_BASE_ID';\n    this.apiKey = 'YOUR_AIRTABLE_API_KEY';\n    this.tableName = 'Form Submissions';\n  }\n\n  // Add new form submission to Airtable\n  async addFormData(formData) {\n    try {\n      const data = {\n        fields: {\n          'Name': formData.name,\n          'Email': formData.email,\n          'Phone': formData.phone || 'Not provided',\n          'Course': formData.course || 'General Inquiry',\n          'Subject': formData.subject || 'Contact Form Submission',\n          'Message': formData.message || 'No message provided',\n          'Demo Request': formData.demo === 'Yes' ? 'Yes' : 'No',\n          'Status': 'New',\n          'Timestamp': new Date().toISOString()\n        }\n      };\n      const response = await fetch(`https://api.airtable.com/v0/${this.baseId}/${encodeURIComponent(this.tableName)}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to save to Airtable');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error saving to Airtable:', error);\n      throw error;\n    }\n  }\n\n  // Get all form submissions (for admin view)\n  async getFormData() {\n    try {\n      const response = await fetch(`https://api.airtable.com/v0/${this.baseId}/${encodeURIComponent(this.tableName)}?sort[0][field]=Timestamp&sort[0][direction]=desc`, {\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch data from Airtable');\n      }\n      const data = await response.json();\n      return data.records.map(record => ({\n        id: record.id,\n        timestamp: record.fields.Timestamp,\n        name: record.fields.Name,\n        email: record.fields.Email,\n        phone: record.fields.Phone,\n        course: record.fields.Course,\n        subject: record.fields.Subject,\n        message: record.fields.Message,\n        demo_request: record.fields['Demo Request'],\n        status: record.fields.Status\n      }));\n    } catch (error) {\n      console.error('Error fetching from Airtable:', error);\n      throw error;\n    }\n  }\n\n  // Update status of a submission\n  async updateStatus(recordId, status) {\n    try {\n      const response = await fetch(`https://api.airtable.com/v0/${this.baseId}/${encodeURIComponent(this.tableName)}/${recordId}`, {\n        method: 'PATCH',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fields: {\n            'Status': status\n          }\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update status');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error updating status:', error);\n      throw error;\n    }\n  }\n}\nexport default new AirtableService();","map":{"version":3,"names":["AirtableService","constructor","baseId","apiKey","tableName","addFormData","formData","data","fields","name","email","phone","course","subject","message","demo","Date","toISOString","response","fetch","encodeURIComponent","method","headers","body","JSON","stringify","ok","Error","json","error","console","getFormData","records","map","record","id","timestamp","Timestamp","Name","Email","Phone","Course","Subject","Message","demo_request","status","Status","updateStatus","recordId"],"sources":["C:/Users/44757/OneDrive/Desktop/Fiesta/src/services/airtableService.js"],"sourcesContent":["// Airtable Service for Form Data Storage\r\n// Airtable is like Excel but better for web apps\r\n\r\nclass AirtableService {\r\n  constructor() {\r\n    // Replace with your Airtable configuration\r\n    this.baseId = 'YOUR_AIRTABLE_BASE_ID';\r\n    this.apiKey = 'YOUR_AIRTABLE_API_KEY';\r\n    this.tableName = 'Form Submissions';\r\n  }\r\n\r\n  // Add new form submission to Airtable\r\n  async addFormData(formData) {\r\n    try {\r\n      const data = {\r\n        fields: {\r\n          'Name': formData.name,\r\n          'Email': formData.email,\r\n          'Phone': formData.phone || 'Not provided',\r\n          'Course': formData.course || 'General Inquiry',\r\n          'Subject': formData.subject || 'Contact Form Submission',\r\n          'Message': formData.message || 'No message provided',\r\n          'Demo Request': formData.demo === 'Yes' ? 'Yes' : 'No',\r\n          'Status': 'New',\r\n          'Timestamp': new Date().toISOString()\r\n        }\r\n      };\r\n\r\n      const response = await fetch(`https://api.airtable.com/v0/${this.baseId}/${encodeURIComponent(this.tableName)}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to save to Airtable');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error saving to Airtable:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get all form submissions (for admin view)\r\n  async getFormData() {\r\n    try {\r\n      const response = await fetch(`https://api.airtable.com/v0/${this.baseId}/${encodeURIComponent(this.tableName)}?sort[0][field]=Timestamp&sort[0][direction]=desc`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch data from Airtable');\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data.records.map(record => ({\r\n        id: record.id,\r\n        timestamp: record.fields.Timestamp,\r\n        name: record.fields.Name,\r\n        email: record.fields.Email,\r\n        phone: record.fields.Phone,\r\n        course: record.fields.Course,\r\n        subject: record.fields.Subject,\r\n        message: record.fields.Message,\r\n        demo_request: record.fields['Demo Request'],\r\n        status: record.fields.Status\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching from Airtable:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Update status of a submission\r\n  async updateStatus(recordId, status) {\r\n    try {\r\n      const response = await fetch(`https://api.airtable.com/v0/${this.baseId}/${encodeURIComponent(this.tableName)}/${recordId}`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          fields: {\r\n            'Status': status\r\n          }\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to update status');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error updating status:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new AirtableService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}