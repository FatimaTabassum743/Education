{"ast":null,"code":"// Google Sheets API Configuration\nconst SPREADSHEET_ID = 'YOUR_SPREADSHEET_ID'; // Replace with your Google Sheet ID\nconst API_KEY = 'YOUR_API_KEY'; // Replace with your Google API Key\nconst SHEET_NAME = 'Sheet1'; // Default sheet name\n\nclass SheetsService {\n  constructor() {\n    this.baseUrl = 'https://sheets.googleapis.com/v4/spreadsheets';\n  }\n\n  // Add new form submission to Google Sheets\n  async addFormData(formData) {\n    try {\n      const values = [[new Date().toISOString(),\n      // Timestamp\n      formData.name, formData.email, formData.phone || 'Not provided', formData.course || 'General Inquiry', formData.title, formData.message, formData.demo === 'Yes' ? 'Yes' : 'No', 'New' // Status\n      ]];\n      const response = await fetch(`${this.baseUrl}/${SPREADSHEET_ID}/values/${SHEET_NAME}!A:I:append?valueInputOption=RAW&key=${API_KEY}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          values: values\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to save to Google Sheets');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error saving to Google Sheets:', error);\n      throw error;\n    }\n  }\n\n  // Get all form submissions (for admin view)\n  async getFormData() {\n    try {\n      const response = await fetch(`${this.baseUrl}/${SPREADSHEET_ID}/values/${SHEET_NAME}?key=${API_KEY}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch data from Google Sheets');\n      }\n      const data = await response.json();\n      if (!data.values || data.values.length <= 1) {\n        return [];\n      }\n\n      // Convert to array of objects (skip header row)\n      const headers = data.values[0];\n      const rows = data.values.slice(1);\n      return rows.map(row => {\n        const obj = {};\n        headers.forEach((header, index) => {\n          obj[header.toLowerCase().replace(/\\s+/g, '_')] = row[index] || '';\n        });\n        return obj;\n      });\n    } catch (error) {\n      console.error('Error fetching from Google Sheets:', error);\n      throw error;\n    }\n  }\n\n  // Update status of a submission\n  async updateStatus(rowIndex, status) {\n    try {\n      const response = await fetch(`${this.baseUrl}/${SPREADSHEET_ID}/values/${SHEET_NAME}!I${rowIndex + 2}?valueInputOption=RAW&key=${API_KEY}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          values: [[status]]\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update status');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error updating status:', error);\n      throw error;\n    }\n  }\n}\nexport default new SheetsService();","map":{"version":3,"names":["SPREADSHEET_ID","API_KEY","SHEET_NAME","SheetsService","constructor","baseUrl","addFormData","formData","values","Date","toISOString","name","email","phone","course","title","message","demo","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","error","console","getFormData","data","length","rows","slice","map","row","obj","forEach","header","index","toLowerCase","replace","updateStatus","rowIndex","status"],"sources":["C:/Users/44757/OneDrive/Desktop/Fiesta/src/services/sheetsService.js"],"sourcesContent":["// Google Sheets API Configuration\r\nconst SPREADSHEET_ID = 'YOUR_SPREADSHEET_ID'; // Replace with your Google Sheet ID\r\nconst API_KEY = 'YOUR_API_KEY'; // Replace with your Google API Key\r\nconst SHEET_NAME = 'Sheet1'; // Default sheet name\r\n\r\nclass SheetsService {\r\n  constructor() {\r\n    this.baseUrl = 'https://sheets.googleapis.com/v4/spreadsheets';\r\n  }\r\n\r\n  // Add new form submission to Google Sheets\r\n  async addFormData(formData) {\r\n    try {\r\n      const values = [\r\n        [\r\n          new Date().toISOString(), // Timestamp\r\n          formData.name,\r\n          formData.email,\r\n          formData.phone || 'Not provided',\r\n          formData.course || 'General Inquiry',\r\n          formData.title,\r\n          formData.message,\r\n          formData.demo === 'Yes' ? 'Yes' : 'No',\r\n          'New' // Status\r\n        ]\r\n      ];\r\n\r\n      const response = await fetch(\r\n        `${this.baseUrl}/${SPREADSHEET_ID}/values/${SHEET_NAME}!A:I:append?valueInputOption=RAW&key=${API_KEY}`,\r\n        {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            values: values\r\n          })\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to save to Google Sheets');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error saving to Google Sheets:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get all form submissions (for admin view)\r\n  async getFormData() {\r\n    try {\r\n      const response = await fetch(\r\n        `${this.baseUrl}/${SPREADSHEET_ID}/values/${SHEET_NAME}?key=${API_KEY}`\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch data from Google Sheets');\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      if (!data.values || data.values.length <= 1) {\r\n        return [];\r\n      }\r\n\r\n      // Convert to array of objects (skip header row)\r\n      const headers = data.values[0];\r\n      const rows = data.values.slice(1);\r\n\r\n      return rows.map(row => {\r\n        const obj = {};\r\n        headers.forEach((header, index) => {\r\n          obj[header.toLowerCase().replace(/\\s+/g, '_')] = row[index] || '';\r\n        });\r\n        return obj;\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching from Google Sheets:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Update status of a submission\r\n  async updateStatus(rowIndex, status) {\r\n    try {\r\n      const response = await fetch(\r\n        `${this.baseUrl}/${SPREADSHEET_ID}/values/${SHEET_NAME}!I${rowIndex + 2}?valueInputOption=RAW&key=${API_KEY}`,\r\n        {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            values: [[status]]\r\n          })\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to update status');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error updating status:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new SheetsService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}